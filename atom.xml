<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.lonersun.com/"/>
  <updated>2018-03-30T14:35:38.794Z</updated>
  <id>https://blog.lonersun.com/</id>
  
  <author>
    <name>Lonersun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.lonersun.com/2018/03/30/%E5%BE%85%E4%BA%A7%E7%94%A8%E5%93%81/"/>
    <id>https://blog.lonersun.com/2018/03/30/待产用品/</id>
    <published>2018-03-30T14:35:38.794Z</published>
    <updated>2018-03-30T14:35:38.794Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>待产包</title>
    <link href="https://blog.lonersun.com/2018/03/30/%E5%BE%85%E4%BA%A7%E5%8C%85/"/>
    <id>https://blog.lonersun.com/2018/03/30/待产包/</id>
    <published>2018-03-30T14:34:42.000Z</published>
    <updated>2018-03-30T14:35:38.799Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>编号</th><th>用品</th><th>品牌</th><th>已购</th></tr></thead><tbody><tr><td>1</td><td>纸尿裤</td><td><a href="https://detail.tmall.hk/hk/item.htm?spm=a220m.1000858.1000725.6.634c73bfOKaRyM&amp;id=530769572327&amp;areaId=110100&amp;user_id=2549841410&amp;cat_id=2&amp;is_b=1&amp;rn=b721c0dbdc1b50ed50779f3870269f68" target="_blank" rel="external">日本花王Merries婴儿宝宝纸尿裤 尿不湿 三倍透气 NB90</a></td><td>❌</td></tr><tr><td>2</td><td>湿巾</td><td>23</td><td>⚠️</td></tr><tr><td>3</td><td>护臀霜</td><td><a href="https://item.jd.com/1068421.html" target="_blank" rel="external">贝亲（Pigeon）婴儿护臀膏 35g IA149</a></td><td>❌</td></tr><tr><td>4</td><td>一次性隔尿垫</td><td>23</td><td><a href=""></a></td></tr><tr><td>5</td><td>口水巾</td><td>23</td><td><a href=""></a></td></tr><tr><td>6</td><td>奶瓶</td><td><a href="https://item.jd.com/568537.html" target="_blank" rel="external">贝亲（Pigeon）标准口径玻璃奶瓶 240ml AA85 </a></td><td>❌</td></tr><tr><td>7</td><td>消毒锅</td><td>23</td><td>⚠️</td></tr><tr><td>8</td><td>洗澡盆</td><td>23</td><td><a href=""></a></td></tr><tr><td>9</td><td>润肤乳</td><td>23</td><td><a href=""></a></td></tr><tr><td>10</td><td>理发器</td><td>23</td><td>⚠️</td></tr><tr><td>11</td><td>婴儿棉签</td><td>23</td><td><a href=""></a></td></tr><tr><td>12</td><td>衣服</td><td>23</td><td><a href=""></a></td></tr><tr><td>13</td><td>抱被</td><td>23</td><td><a href=""></a></td></tr><tr><td>14</td><td>婴儿车</td><td>23</td><td><a href=""></a></td></tr><tr><td>15</td><td>玩具</td><td>23</td><td><a href=""></a></td></tr><tr><td>16</td><td>退热贴</td><td><a href="https://item.jd.hk/1951941715.html" target="_blank" rel="external">小林退热贴12片</a></td><td>⚠️</td></tr><tr><td>17</td><td>洗衣液</td><td><a href="https://detail.tmall.hk/hk/item.htm?spm=a1z0d.6639537.1997196601.4.7cc07484iowBgi&amp;id=549421175365" target="_blank" rel="external">韩国bb保宁婴儿洗衣液宝宝1500ml</a></td><td>❌</td></tr><tr><td>18</td><td>肥皂</td><td><a href="https://item.jd.hk/2192063.html" target="_blank" rel="external">保宁 B&amp;B 婴幼儿洗衣皂200g*3</a></td><td>❌</td></tr><tr><td>19</td><td>奶瓶清洗剂</td><td><a href="https://item.jd.com/999515.html" target="_blank" rel="external">贝亲（Pigeon）奶瓶清洁剂/清洗液 400ml</a></td><td>⚠️</td></tr><tr><td>20</td><td>指甲剪</td><td>23</td><td><a href=""></a></td></tr><tr><td>21</td><td>维生素D</td><td>23</td><td><a href=""></a></td></tr><tr><td>22</td><td>婴儿勺</td><td>23</td><td><a href=""></a></td></tr><tr><td>23</td><td>奶粉</td><td><a href="https://item.jd.hk/1938044.html" target="_blank" rel="external">德国爱他美aptamil婴幼儿奶粉 Pre段(0-6个月)800g</a></td><td>❌</td></tr><tr><td>24</td><td>二合一洗发沐浴露</td><td><a href="https://item.jd.com/956658.html" target="_blank" rel="external"> 哈罗闪（sanosan）婴儿洗发沐浴露二合一50ml</a></td><td>❌</td></tr><tr><td>25</td><td>爽身粉</td><td><a href="https://item.jd.com/4426168.html" target="_blank" rel="external">贝亲（Pigeon）HA15 婴儿摇摇爽身粉无滑石粉型50G</a></td><td>❌</td></tr><tr><td>26</td><td>奶瓶刷</td><td><a href="https://item.jd.com/231823.html" target="_blank" rel="external">日康旋转奶瓶刷 RK-3500</a></td><td>⚠️</td></tr><tr><td>27</td><td>吸奶器</td><td><a href="https://item.jd.com/2642410.html" target="_blank" rel="external">利浦新安怡 英国品牌 AVENT 安心系列手动吸乳器/吸奶器</a></td><td>❌</td></tr><tr><td>28</td><td>和尚服</td><td><a href="https://item.jd.com/1026966709.html" target="_blank" rel="external">童泰婴儿衣服新生儿和尚服初生儿纯棉内衣套装0-3个月 白色纯色 52码</a></td><td>❌</td></tr><tr><td>29</td><td>待产包</td><td><a href="https://item.jd.com/1022611445.html" target="_blank" rel="external">十月结晶</a></td><td>❌</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;用品&lt;/th&gt;
&lt;th&gt;品牌&lt;/th&gt;
&lt;th&gt;已购&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;纸尿裤&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.lonersun.com/2017/11/02/hello-world/"/>
    <id>https://blog.lonersun.com/2017/11/02/hello-world/</id>
    <published>2017-11-02T10:11:30.836Z</published>
    <updated>2017-11-02T10:11:30.836Z</updated>
    
    <content type="html"><![CDATA[<p>你好，世界！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，世界！&lt;/p&gt;

      
    
    </summary>
    
      <category term="Hello World" scheme="https://blog.lonersun.com/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="https://blog.lonersun.com/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>Python 虚拟环境(virtualenv)的使用</title>
    <link href="https://blog.lonersun.com/2017/11/02/virtualenv/"/>
    <id>https://blog.lonersun.com/2017/11/02/virtualenv/</id>
    <published>2017-11-02T09:44:42.000Z</published>
    <updated>2017-11-02T10:09:06.763Z</updated>
    
    <content type="html"><![CDATA[<p>在开发 Python 程序的时候，我们会遇到依赖、版本的问题，Virtualenv 创建一个拥有自己安装目录的环境, 这个环境不与其他虚拟环境共享库, 能够方便的管理 Python 版本和管理 Python 库。</p><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install python-virtualenv</div></pre></td></tr></table></figure><p><strong>创建虚拟环境</strong></p><p>例如创建名为 test 的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ virtualenv test</div><div class="line">New python executable in /Users/Lonersun/test/bin/python</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line">➜  ~</div></pre></td></tr></table></figure><p>默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 –no-site-packages建立虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv --no-site-packages [虚拟环境名称]</div></pre></td></tr></table></figure><p><strong>进入虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜ cd test</div><div class="line">➜ source ./bin/activate</div><div class="line">(test) ➜  test</div></pre></td></tr></table></figure><p>注意此时命令行会多一个(test)，test为虚拟环境名称，接下来所有模块都只会安装到该目录中去。</p><p><strong>退出虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(test) ➜ deactivate</div><div class="line">➜</div></pre></td></tr></table></figure><p><strong>在虚拟环境安装 Python 包</strong></p><p>Virtualenv 附带有 Pip 安装工具，因此需要安装的包可以直接运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install [包名称]</div></pre></td></tr></table></figure><p>如果没有启动虚拟环境，系统也安装了 Pip 工具，那么包将被安装在系统环境中，为了避免发生此事，可以在 ~/.bashrc 文件中加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PIP_REQUIRE_VIRTUALENV=true</div></pre></td></tr></table></figure><p>或者让在执行 Pip 的时候让系统自动开启虚拟环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PIP_RESPECT_VIRTUALENV=true</div></pre></td></tr></table></figure><p><strong>Virtualenvwrapper</strong></p><p>virtualenv 有一个缺点就是，每次开启虚拟环境之前要去虚拟环境所在目录下的 bin 目录下 source 一下 activate，这就需要我们记住每个虚拟环境所在的目录。</p><p>一种可行的解决方案是，将所有的虚拟环境目录全都集中起来，比如放到 ~/virtualenvs/，并对不同的虚拟环境使用不同的目录来管理。Virtualenvwrapper 正是这样做的。并且，它还省去了每次开启虚拟环境时候的 source 操作，使得虚拟环境更加好用。</p><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install virtualenvwrapper</div></pre></td></tr></table></figure><p>此时还不能使用 virtualenvwrapper ，默认 virtualenvwrapper 安装在 /usr/local/bin 下面，实际上需要运行 virtualenvwrapper.sh 文件才行，打开这个文件看看,里面有安装步骤，照着操作把环境设置好。</p><ol><li>创建目录用来存放虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir $HOME/.virtualenvs</div></pre></td></tr></table></figure><ol><li>在 ~/.bashrc 中添加行(如果使用 zsh，则添加到 ~/.zshrc 中。)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=$HOME/.virtualenvs</div><div class="line">source /usr/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure><ol><li>运行：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure><p>此时 virtualenvwrapper 就可以使用了。</p><p><strong>常用命令</strong></p><p>列出虚拟环境列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workon</div></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsvirtualenv</div></pre></td></tr></table></figure><p>新建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv [虚拟环境名称]</div></pre></td></tr></table></figure><p>启动/切换虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workon [虚拟环境名称]</div></pre></td></tr></table></figure><p>删除虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rmvirtualenv [虚拟环境名称]</div></pre></td></tr></table></figure><p>离开虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发 Python 程序的时候，我们会遇到依赖、版本的问题，Virtualenv 创建一个拥有自己安装目录的环境, 这个环境不与其他虚拟环境共享库, 能够方便的管理 Python 版本和管理 Python 库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.lonersun.com/categories/Python/"/>
    
    
      <category term="virtualenv" scheme="https://blog.lonersun.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>github</title>
    <link href="https://blog.lonersun.com/2017/10/30/github/"/>
    <id>https://blog.lonersun.com/2017/10/30/github/</id>
    <published>2017-10-30T11:35:58.000Z</published>
    <updated>2017-11-27T09:01:00.976Z</updated>
    
    <content type="html"><![CDATA[<p>##一、初始化<br>首先从 GitHub 找到要克隆的项目，克隆到本地，并进行初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 克隆名为 Demo 的项目</div><div class="line">➜  ~ git clone https://github.com/Lonersun/demo</div><div class="line">Cloning into &apos;demo&apos;...</div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (3/3), done.</div><div class="line"># 进入项目文件夹</div><div class="line">➜  ~ cd demo</div><div class="line"># 进行初始化（它会让你提供生产、开发等分支的名称，直接回车，使用默认的即可）</div><div class="line">➜  demo git:(master) git flow init</div><div class="line"></div><div class="line">Which branch should be used for bringing forth production releases?</div><div class="line">   - master</div><div class="line">Branch name for production releases: [master]</div><div class="line">Branch name for &quot;next release&quot; development: [develop]</div><div class="line"></div><div class="line">How to name your supporting branch prefixes?</div><div class="line">Feature branches? [feature/]</div><div class="line">Release branches? [release/]</div><div class="line">Hotfix branches? [hotfix/]</div><div class="line">Support branches? [support/]</div><div class="line">Version tag prefix? []</div><div class="line">➜  demo git:(develop)</div><div class="line"># 使用 git branch 命令我们可以发现它自动为我们创建了develop分支（开发分支），master分支（生产分支），我么也可以知道我们目前在develop分支上</div><div class="line">➜  demo git:(develop) git branch</div><div class="line">* develop</div><div class="line">  master</div><div class="line">➜  demo git:(develop)</div></pre></td></tr></table></figure><h2 id="二、开发新功能"><a href="#二、开发新功能" class="headerlink" title="二、开发新功能"></a>二、开发新功能</h2><p>开始代码开发之前我们要创建一个新的 Feature 这个分支基于 Develop 分支,分支名称可以根据功能、模块来命名，比如我们现在在学习 GitFlow 的使用，那么我们可以创建一个名称为study的开发分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 基于develop分支创建一个名称为study的开发分支</div><div class="line">➜  demo git:(develop) git flow feature start study</div><div class="line">Switched to a new branch &apos;feature/study&apos;</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new branch &apos;feature/study&apos; was created, based on &apos;develop&apos;</div><div class="line">- You are now on branch &apos;feature/study&apos;</div><div class="line"></div><div class="line">Now, start committing on your feature. When done, use:</div><div class="line"></div><div class="line">     git flow feature finish study</div><div class="line"></div><div class="line">➜  demo git:(feature/study)</div></pre></td></tr></table></figure><p>从提示信息我们可以看到：</p><ul><li>一个新的分支feature/study已经被创建，基于develop分支；</li><li>已经切换到了feature/study分支上；</li></ul><p>现在可以开始我们的代码开发啦！</p><p>或许现在你的团队需要共同开发此功能，并且在这个分支上，那么你可以将此分支推到远端，供他人下载更新，实现共同开发的目的，那么你需要这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 将本地开发分支推送到远程服务器</div><div class="line">➜  demo git:(feature/study) git flow feature publish study</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/Lonersun/demo</div><div class="line"> * [new branch]      feature/study -&gt; feature/study</div><div class="line">Already on &apos;feature/study&apos;</div><div class="line">Your branch is up-to-date with &apos;origin/feature/study&apos;.</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new remote branch &apos;feature/study&apos; was created</div><div class="line">- The local branch &apos;feature/study&apos; was configured to track the remote branch</div><div class="line">- You are now on branch &apos;feature/study&apos;</div><div class="line"></div><div class="line">➜  demo git:(feature/study)</div></pre></td></tr></table></figure><p>从提示信息可以看到，这个分支已经被推送到远端服务器<br>你的小伙伴可以通过下面的命令获取到这个分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 拉取远程的feature/study分支</div><div class="line">➜  demo git:(develop) git pull origin feature/study</div><div class="line">From https://github.com/Lonersun/demo</div><div class="line"> * branch            feature/study -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line"># 切换到feature/study分支</div><div class="line">➜  demo git:(develop) git checkout feature/study</div><div class="line">Switched to branch &apos;feature/study&apos;</div><div class="line">Your branch is up-to-date with &apos;origin/feature/study&apos;.</div><div class="line">➜  demo git:(feature/study)</div></pre></td></tr></table></figure><p>开始代码开发<br>例如我创建一个hello.py 并进行编辑；<br>当我们需要提交代码到远程代码仓库时，我们可以这样做：<br>首先拉取下远程的分支，将远程最新代码合并到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(feature/study) git pull origin feature/study</div><div class="line">From https://github.com/Lonersun/demo</div><div class="line"> * branch            feature/study -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">➜  demo git:(feature/study)</div></pre></td></tr></table></figure><p>然后我们查看下项目的更改状况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># git status 查看当前版本库文件更改状态</div><div class="line">➜  demo git:(feature/study)  git status</div><div class="line">On branch feature/study</div><div class="line">Your branch is up-to-date with &apos;origin/feature/study&apos;.</div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">hello.py</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class="line">➜  demo git:(feature/study)</div></pre></td></tr></table></figure><p>从上面我们可以看到 hello.py 没有在版本库里面，我们需要将这个文件加入到版本库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 将文件 hello.py 加入到暂存区</div><div class="line">➜  demo git:(feature/study) ✗ git add hello.py</div><div class="line"># 将暂存区的文件加入到本地代码仓库（-m 后面添加提交的描述信息）</div><div class="line">➜  demo git:(feature/study) ✗ git commit -m &apos;add hello world&apos;</div><div class="line">[feature/study 4249b2e] add hello world</div><div class="line"> 1 file changed, 2 insertions(+)</div><div class="line"> create mode 100644 hello.py</div><div class="line"> # 将本地代码更改推送到远端代码仓库</div><div class="line"> ➜  demo git:(feature/study) git push origin feature/study</div><div class="line">Everything up-to-date</div></pre></td></tr></table></figure><p>继续开发，当本地开发完成，测试通过后，我们需要将本地代码合并到 develop 分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(feature/study) git flow feature finish study</div><div class="line">Switched to branch &apos;develop&apos;</div><div class="line">Updating 293b3b4..4249b2e</div><div class="line">Fast-forward</div><div class="line"> hello.py | 2 ++</div><div class="line"> 1 file changed, 2 insertions(+)</div><div class="line"> create mode 100644 hello.py</div><div class="line">Deleted branch feature/study (was 4249b2e).</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- The feature branch &apos;feature/study&apos; was merged into &apos;develop&apos;</div><div class="line">- Feature branch &apos;feature/study&apos; has been removed</div><div class="line">- You are now on branch &apos;develop&apos;</div><div class="line"></div><div class="line">➜  demo git:(develop)</div></pre></td></tr></table></figure><p>通过提示我们得到：</p><ul><li>feature/study 分支合并到了 deelop 分支</li><li>feature/study 分支被删除</li><li>现在处于 develop 分支</li></ul><p>注意，这只是本地 feature/study 合并到了develop 分支，远端代码仓库的 develop 分支并没有更新，所以我们需要将本地 develop 分支推送到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(develop) git push origin develop</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/Lonersun/demo</div><div class="line"> * [new branch]      develop -&gt; develop</div><div class="line">➜  demo git:(develop)</div></pre></td></tr></table></figure><h2 id="三、准备待上线版本并上线"><a href="#三、准备待上线版本并上线" class="headerlink" title="三、准备待上线版本并上线"></a>三、准备待上线版本并上线</h2><p>通过上面的步骤，我们已经完成了功能模块本地的开发、测试工作，现在需要进行测试环境的测试，为此我们需要建立一个待发布版本，来进行后续的操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(develop) git flow release start v1.0</div><div class="line">Switched to a new branch &apos;release/v1.0&apos;</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new branch &apos;release/v1.0&apos; was created, based on &apos;develop&apos;</div><div class="line">- You are now on branch &apos;release/v1.0&apos;</div><div class="line"></div><div class="line">Follow-up actions:</div><div class="line">- Bump the version number now!</div><div class="line">- Start committing last-minute fixes in preparing your release</div><div class="line">- When done, run:</div><div class="line"></div><div class="line">     git flow release finish &apos;v1.0&apos;</div><div class="line"></div><div class="line">➜  demo git:(release/v1.0)</div></pre></td></tr></table></figure><p>我们可以看到：</p><ul><li>一个新的 release/v1.0 版本被创建，基于 develop 分支</li><li>现在位于 release/v1.0 版本</li></ul><p>注意：这里我用的版本名称为 v1.0 ，为了便于版本管理，建议大家在创建 release 分支时 按照 v1.0 这样的命名规范递增命名，比如当前版本号为 v1.0 下一个 release 版本号可以为 v1.1</p><p>接下来将本地 release 分支推送到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(release/v1.0) git flow release publish v1.0</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/Lonersun/demo</div><div class="line"> * [new branch]      release/v1.0 -&gt; release/v1.0</div><div class="line">Already on &apos;release/v1.0&apos;</div><div class="line">Your branch is up-to-date with &apos;origin/release/v1.0&apos;.</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- A new remote branch &apos;release/v1.0&apos; was created</div><div class="line">- The local branch &apos;release/v1.0&apos; was configured to track the remote branch</div><div class="line">- You are now on branch &apos;release/v1.0&apos;</div><div class="line"></div><div class="line">➜  demo git:(release/v1.0)</div></pre></td></tr></table></figure><p>部署到测试服务器进行测试，如果在测试过程中发现代码 Bug 只需在当前 release 分支上更改，再提交、部署、测试、即可；</p><p>比如，我发现 hello.py 代码有 Bug ，那么我直接修改该文件，并提交，测试环境进行更新，再进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># 本地代码修复、提交</div><div class="line">➜  demo git:(release/v1.0) ✗ git status</div><div class="line">On branch release/v1.0</div><div class="line">Your branch is up-to-date with &apos;origin/release/v1.0&apos;.</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">modified:   hello.py</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div><div class="line">➜  demo git:(release/v1.0) ✗ git add hello.py</div><div class="line">➜  demo git:(release/v1.0) ✗ git commit -m &apos;fix hello bug&apos;</div><div class="line">[release/v1.0 f37c4fd] fix hello bug</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">➜  demo git:(release/v1.0) git push origin release/v1.0</div><div class="line">Counting objects: 3, done.</div><div class="line">Delta compression using up to 8 threads.</div><div class="line">Compressing objects: 100% (2/2), done.</div><div class="line">Writing objects: 100% (3/3), 327 bytes | 327.00 KiB/s, done.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/Lonersun/demo</div><div class="line">   4249b2e..f37c4fd  release/v1.0 -&gt; release/v1.0</div><div class="line">➜  demo git:(release/v1.0)</div><div class="line"></div><div class="line"># 测试环境进行拉取、重新部署、再测试</div><div class="line">➜  demo git:(release/v1.0) git pull origin release/v1.0</div><div class="line">From https://github.com/Lonersun/demo</div><div class="line"> * branch            release/v1.0 -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">➜  demo git:(release/v1.0)</div></pre></td></tr></table></figure><p>经过反复的过程，确定无 Bug 后，可以将此分支完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">➜  demo git:(release/v1.0) git flow release finish v1.0</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> hello.py | 3 +++</div><div class="line"> 1 file changed, 3 insertions(+)</div><div class="line"> create mode 100644 hello.py</div><div class="line">Switched to branch &apos;develop&apos;</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> hello.py | 1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">Deleted branch release/v1.0 (was f37c4fd).</div><div class="line"></div><div class="line">Summary of actions:</div><div class="line">- Latest objects have been fetched from &apos;origin&apos;</div><div class="line">- Release branch has been merged into &apos;master&apos;</div><div class="line">- The release was tagged &apos;v1.0&apos;</div><div class="line">- Release branch has been back-merged into &apos;develop&apos;</div><div class="line">- Release branch &apos;release/v1.0&apos; has been deleted</div><div class="line"></div><div class="line">➜  demo git:(develop)</div></pre></td></tr></table></figure><p>在执行完成操作时会依次提示如下信息<br>填入合并到 develop 分支的说明<br>填入标签版本号 （可填入当前 release 版本号）<br>填入合并到 master 分支的说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Merge branch &apos;release/v1.0&apos;</div><div class="line">study git flow</div><div class="line"># Please enter a commit message to explain why this merge is necessary,</div><div class="line"># especially if it merges an updated upstream into a topic branch.</div><div class="line">#</div><div class="line"># Lines starting with &apos;#&apos; will be ignored, and an empty message aborts</div><div class="line"># the commit.</div><div class="line"></div><div class="line">Merge branch &apos;release/v1.0&apos;</div><div class="line">1.0</div><div class="line">#</div><div class="line"># Write a message for tag:</div><div class="line">#   v1.0</div><div class="line"># Lines starting with &apos;#&apos; will be ignored.</div><div class="line">Merge branch &apos;release/v1.0&apos;</div><div class="line"></div><div class="line"></div><div class="line">Merge branch &apos;release/v1.0&apos; into develop</div><div class="line">study git flow</div><div class="line"># Please enter a commit message to explain why this merge is necessary,</div><div class="line"># especially if it merges an updated upstream into a topic branch.</div><div class="line">#</div><div class="line"># Lines starting with &apos;#&apos; will be ignored, and an empty message aborts</div><div class="line"># the commit.</div><div class="line">``` </div><div class="line">此时 </div><div class="line">release/v1.0 分支合并到了 Develop 分支</div><div class="line">release/v1.0 分支合并到了 Master 分支</div><div class="line">打了 v1.0 的标签</div><div class="line">release/v1.0 分支被删除</div><div class="line"></div><div class="line">将本地分支推送到远程</div></pre></td></tr></table></figure><h1 id="推送-develop-分支到远程"><a href="#推送-develop-分支到远程" class="headerlink" title="推送 develop 分支到远程"></a>推送 develop 分支到远程</h1><p>➜  demo git:(develop) git push origin develop<br>Counting objects: 1, done.<br>Writing objects: 100% (1/1), 255 bytes | 255.00 KiB/s, done.<br>Total 1 (delta 0), reused 0 (delta 0)<br>To <a href="https://github.com/Lonersun/demo" target="_blank" rel="external">https://github.com/Lonersun/demo</a><br>   4249b2e..0d70958  develop -&gt; develop<br>➜  demo git:(develop)</p><h1 id="推送-master-分支到远程"><a href="#推送-master-分支到远程" class="headerlink" title="推送 master 分支到远程"></a>推送 master 分支到远程</h1><p>➜  demo git:(develop) git push origin master<br>Counting objects: 1, done.<br>Writing objects: 100% (1/1), 249 bytes | 249.00 KiB/s, done.<br>Total 1 (delta 0), reused 0 (delta 0)<br>To <a href="https://github.com/Lonersun/demo" target="_blank" rel="external">https://github.com/Lonersun/demo</a><br>   293b3b4..e62731a  master -&gt; master<br>➜  demo git:(develop)</p><h1 id="推送本地标签到远程"><a href="#推送本地标签到远程" class="headerlink" title="推送本地标签到远程"></a>推送本地标签到远程</h1><p>➜  demo git:(develop) git push –tags<br>Counting objects: 1, done.<br>Writing objects: 100% (1/1), 159 bytes | 159.00 KiB/s, done.<br>Total 1 (delta 0), reused 0 (delta 0)<br>To <a href="https://github.com/Lonersun/demo" target="_blank" rel="external">https://github.com/Lonersun/demo</a></p><ul><li>[new tag]         v1.0 -&gt; v1.0<br>➜  demo git:(develop)<br>```</li></ul><p>我们已完成代码的提交工作，只需将生产服务器代码进行更新并部署就完成了上线工作。</p><h2 id="四、紧急-Bug-修复"><a href="#四、紧急-Bug-修复" class="headerlink" title="四、紧急 Bug 修复"></a>四、紧急 Bug 修复</h2><p>在实际生产环境中如果发现了 Bug 我们可以按此步骤进行修复：<br>首先新建 Hotfix 分支</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##一、初始化&lt;br&gt;首先从 GitHub 找到要克隆的项目，克隆到本地，并进行初始化。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.lonersun.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://blog.lonersun.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>将自己的Python代码打包放到PyPI上</title>
    <link href="https://blog.lonersun.com/2017/10/21/%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84Python%E4%BB%A3%E7%A0%81%E6%89%93%E5%8C%85%E6%94%BE%E5%88%B0PyPI%E4%B8%8A/"/>
    <id>https://blog.lonersun.com/2017/10/21/将自己的Python代码打包放到PyPI上/</id>
    <published>2017-10-21T11:36:08.000Z</published>
    <updated>2017-11-02T10:09:22.621Z</updated>
    
    <content type="html"><![CDATA[<p>Pip 是 Python 常用的包管理工具，那么怎样将自己开发的包上传到 PyPI 源供他人使用呢？之前做过一个基于 Sphinx、MarkDown 生成文档的脚本 docs.lonersun.com 最近稍作整理，为提高使用体验决定将其提交到 PyPI 源，以此文档作为使用总结。</p><p><strong>注册 PyPI 账号</strong></p><p>注册链接：<a href="https://pypi.python.org/pypi?%3Aaction=register_form" title="https://pypi.python.org/pypi?%3Aaction=register_form" target="_blank" rel="external">https://pypi.python.org/pypi?%3Aaction=register_form</a></p><p><strong> 安装 Setuptools </strong></p><ul><li>下载 ez_setup.py：<a href="https://bootstrap.pypa.io/ez_setup.py" title="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">https://bootstrap.pypa.io/ez_setup.py</a></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ez_setup.py</div></pre></td></tr></table></figure></li><li><p>配置 ~/.pypirc 文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[distutils]</div><div class="line">index-servers =</div><div class="line">pypi</div><div class="line"></div><div class="line">[pypi]</div><div class="line">username:name</div><div class="line">password:password</div></pre></td></tr></table></figure><p><strong>使用</strong></p><p>在项目内添加 setup.py 并进行配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</div><div class="line"></div><div class="line">setup(name=<span class="string">'ananas-doc'</span>,    <span class="comment"># 包名称</span></div><div class="line">      version=<span class="string">'1.2.1'</span>,      <span class="comment"># 版本号</span></div><div class="line">      description=<span class="string">u"docs tools"</span>,  <span class="comment"># 描述</span></div><div class="line">      long_description=<span class="string">""</span>,</div><div class="line">      classifiers=[],  <span class="comment"># 参考https://pypi.python.org/pypi?%3Aaction=list_classifiers</span></div><div class="line">      keywords=<span class="string">'docs tools'</span>, <span class="comment"># 关键词</span></div><div class="line">      author=<span class="string">"Lonerusn"</span>, <span class="comment"># 作者</span></div><div class="line">      author_email=<span class="string">"lonersun@126.com"</span>,  <span class="comment"># 邮箱</span></div><div class="line">      url=<span class="string">'https://github.com/Lonersun/ananas-doc'</span>, <span class="comment"># 项目地址</span></div><div class="line">      license=<span class="string">'Apache License 2.0'</span>, <span class="comment"># 协议</span></div><div class="line">      platforms=<span class="string">'any'</span>,</div><div class="line">      packages=find_packages(), <span class="comment"># 要安装的包路径</span></div><div class="line">      zip_safe=<span class="keyword">False</span>, <span class="comment"># 默认是False，这样在每次生成egg包时都会检查项目文件的内容，确保无误。</span></div><div class="line">      include_package_data=<span class="keyword">True</span>, <span class="comment"># 是否加载包以外的文件</span></div><div class="line">      install_requires=[   <span class="comment"># 依赖的包</span></div><div class="line">          <span class="string">'sphinx&gt;=1.6.3'</span>,</div><div class="line">          <span class="string">'sphinx-rtd-theme&gt;=0.2.4'</span>,</div><div class="line">          <span class="string">'m2r&gt;=0.1.12'</span>,</div><div class="line">          <span class="string">'pyaml&gt;=3.12'</span>,</div><div class="line">          <span class="string">'pymongo&gt;=3.5.1'</span>,</div><div class="line">      ],</div><div class="line">      entry_points=&#123;  <span class="comment"># 支持动态发现服务和插件</span></div><div class="line">          <span class="string">'console_scripts'</span>: [</div><div class="line">              <span class="string">'ananas-mkdoc = ananasdoc:main'</span>,</div><div class="line">          ],</div><div class="line">          <span class="string">'gui_scripts'</span>: [</div><div class="line">              <span class="string">'ananas-mkdoc = ananasdoc:main'</span>,</div><div class="line">          ]</div><div class="line">      &#125;,</div><div class="line">)</div></pre></td></tr></table></figure><p>因这个包需要加载一些模版文件，所以在同目录下创建了 MANIFEST.in 文件，并将引入的内容添加进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">include ananasdoc/template/_static/css/*.css</div><div class="line">include ananasdoc/template/_static/images/*.png</div><div class="line">include ananasdoc/template/_static/js/*.js</div><div class="line">include ananasdoc/template/_version/.note</div><div class="line">include ananasdoc/template/_version/.version</div><div class="line">include ananasdoc/template/_version/*.yml</div><div class="line">include ananasdoc/index.rst</div></pre></td></tr></table></figure><p><strong>打包上传</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py sdist upload</div></pre></td></tr></table></figure><p><strong>使用</strong></p><p>上传完成后可以安装使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install 包名</div></pre></td></tr></table></figure><p>setup.py 可参考 <a href="https://github.com/Lonersun/ananas-doc/blob/master/setup.py" target="_blank" rel="external">https://github.com/Lonersun/ananas-doc/blob/master/setup.py</a></p><p>详细介绍：<a href="https://docs.python.org/2/distutils/setupscript.html" target="_blank" rel="external">https://docs.python.org/2/distutils/setupscript.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pip 是 Python 常用的包管理工具，那么怎样将自己开发的包上传到 PyPI 源供他人使用呢？之前做过一个基于 Sphinx、MarkDown 生成文档的脚本 docs.lonersun.com 最近稍作整理，为提高使用体验决定将其提交到 PyPI 源，以此文档作为使
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.lonersun.com/categories/Python/"/>
    
    
      <category term="pypi" scheme="https://blog.lonersun.com/tags/pypi/"/>
    
  </entry>
  
  <entry>
    <title>MongoDb索引使用一常用命令</title>
    <link href="https://blog.lonersun.com/2017/10/12/MongoDb%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E4%B8%80%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.lonersun.com/2017/10/12/MongoDb索引使用一常用命令/</id>
    <published>2017-10-12T12:03:07.000Z</published>
    <updated>2017-11-02T10:08:38.037Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文将以集合order为例，列举常用的索引命令。</strong></p><h2 id="1-查看索引："><a href="#1-查看索引：" class="headerlink" title="1. 查看索引："></a>1. 查看索引：</h2><h3 id="1-1-查看集合中的索引："><a href="#1-1-查看集合中的索引：" class="headerlink" title="1.1 查看集合中的索引："></a>1.1 查看集合中的索引：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.COLLECTION_NAME.getIndexes()</div></pre></td></tr></table></figure><p><em>例：获取集合order的索引:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ db.order.getIndexes()</div><div class="line">[</div><div class="line">&#123;</div><div class="line"><span class="string">"v"</span> : 1,</div><div class="line"><span class="string">"key"</span> : &#123;</div><div class="line"><span class="string">"_id"</span> : 1</div><div class="line">&#125;,</div><div class="line"><span class="string">"name"</span> : <span class="string">"_id_"</span>,</div><div class="line"><span class="string">"ns"</span> : <span class="string">"snack.order"</span></div><div class="line">&#125;</div><div class="line">]</div><div class="line">&gt;</div></pre></td></tr></table></figure><ul><li><p>我们可以看到Mongo自动创建了一条名为<em>id</em>的索引;</p></li><li><p>_id索引：是绝大多数集合默认建立的索引，对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段</p></li></ul><h3 id="1-2-查看集合中的索引大小"><a href="#1-2-查看集合中的索引大小" class="headerlink" title="1.2 查看集合中的索引大小:"></a>1.2 查看集合中的索引大小:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.COLLECTION_NAME.totalIndexSize()</div></pre></td></tr></table></figure><p><em>例：获取集合order索引的大小</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ db.order.totalIndexSize()</div><div class="line">16834560</div></pre></td></tr></table></figure><h2 id="2-创建索引："><a href="#2-创建索引：" class="headerlink" title="2. 创建索引："></a>2. 创建索引：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.COLLECTION_NAME.ensureIndex(keys[,options])</div></pre></td></tr></table></figure><h3 id="2-1-普通索引"><a href="#2-1-普通索引" class="headerlink" title="2.1 普通索引:"></a>2.1 普通索引:</h3><p><strong>为集合中的某个字段创建索引</strong></p><p><em>例：为order创建key为state顺序为倒序的索引（其中1：生序，-1：降序）</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;<span class="string">"state"</span>:-1&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</div><div class="line"><span class="string">"numIndexesBefore"</span> : 1,</div><div class="line"><span class="string">"numIndexesAfter"</span> : 2,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-复合索引："><a href="#2-2-复合索引：" class="headerlink" title="2.2 复合索引："></a>2.2 复合索引：</h3><p><strong>为多个字段联合创建索引</strong></p><p><em>例：为order创建state、shop_id 均为倒序的复合索引</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;<span class="string">"state"</span>:-1, <span class="string">"shop_id"</span>:-1&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"createdCollectionAutomatically"</span> : <span class="literal">false</span>,</div><div class="line"><span class="string">"numIndexesBefore"</span> : 2,</div><div class="line"><span class="string">"numIndexesAfter"</span> : 3,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-3-文档索引："><a href="#2-3-文档索引：" class="headerlink" title="2.3 文档索引："></a>2.3 文档索引：</h3><p><strong>MongoDB可以为一个或多个字段创建索引，当字段是子文档时，同样可以创建索引。</strong></p><p><em>例：address集合中存在这样的数据</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"59a617a6b8d224d74a26ee5f"</span>),</div><div class="line">    <span class="string">"city_name"</span> : <span class="string">"北京市"</span>,</div><div class="line">    <span class="string">"bd_poi"</span> : [</div><div class="line">        116.391036665036,</div><div class="line">        40.0055065248079</div><div class="line">    ],</div><div class="line">    <span class="string">"address"</span> : <span class="string">"北京市朝阳区大屯路风林绿洲21号楼3单元207室"</span>,</div><div class="line">    <span class="string">"area_info"</span> : &#123;</div><div class="line">        <span class="string">"area_id"</span> : <span class="string">"599ea10499826905c38f924a"</span>,</div><div class="line">        <span class="string">"area_name"</span> : <span class="string">"亚运村"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以为子文档创建如下索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.address.ensureIndex(&#123;<span class="string">"area_info"</span>:1&#125;)</div></pre></td></tr></table></figure><p><strong>注意：</strong>查询时子文档的字段顺序要和查询顺序保持一致，否则不会命中索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 会命中索引</span></div><div class="line">db.address.find(&#123;area_info:&#123;area_id:<span class="string">"599ea10499826905c38f924a"</span>, area_name:<span class="string">"亚运村"</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment"># 不会命中索引</span></div><div class="line">db.address.find(&#123;area_info:&#123;area_name:<span class="string">"亚运村"</span>,area_id:<span class="string">"599ea10499826905c38f924a"</span>&#125;&#125;)</div></pre></td></tr></table></figure><h3 id="2-4-唯一索引"><a href="#2-4-唯一索引" class="headerlink" title="2.4 唯一索引"></a>2.4 唯一索引</h3><p><strong>unique: 建立的索引是否唯一。指定为true创建唯一索引。默认值为false。</strong></p><p><em>例：为商家订单ID(org_order_id)创建唯一索引</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;<span class="string">"org_order_id"</span>:-1&#125;, &#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</div></pre></td></tr></table></figure><p><strong>dropDups: 在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false。</strong></p><p><em>例：为商家订单ID(org_order_id)创建唯一索引,并且删除重复记录</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;<span class="string">"org_order_id"</span>:-1&#125;, &#123;<span class="string">"unique"</span>:<span class="literal">true</span>, <span class="string">"dropDups"</span>: <span class="literal">true</span>&#125;)</div></pre></td></tr></table></figure><h3 id="2-5-过期索引"><a href="#2-5-过期索引" class="headerlink" title="2.5 过期索引"></a>2.5 过期索引</h3><p><strong>在一段时间后会过期的索引，在索引过期后，相应的数据会被删除，适用于 用户登陆信息，日志</strong></p><p><em>例：为集合log创建过期索引，过期时间为10s</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建索引</span></div><div class="line">$ db.log.ensureIndex(&#123;<span class="string">"time"</span>:1&#125;, &#123;expireAfterSeconds:10&#125;)</div><div class="line">&#123;</div><div class="line"><span class="string">"createdCollectionAutomatically"</span> : <span class="literal">true</span>,</div><div class="line"><span class="string">"numIndexesBefore"</span> : 1,</div><div class="line"><span class="string">"numIndexesAfter"</span> : 2,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 插入一条数据</span></div><div class="line">$ db.log.insert(&#123;<span class="string">"time"</span>:new Date()&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</div><div class="line"></div><div class="line"><span class="comment"># 查询</span></div><div class="line">$ db.log.find()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"59c77ee20a61da85ebc8ed0f"</span>), <span class="string">"time"</span> : ISODate(<span class="string">"2017-09-24T09:46:10.359Z"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment"># 大概一分钟后查询，可看到之前插入的数据已不存在</span></div><div class="line">$ db.log.find()</div></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>a. 存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。</p><p>  <em>例如：db.log.insert({time:1})这种是不能被自动删除的。</em></p></li><li><p>b. 如果指定了ISODate数组，则按照最小的时间进行删除。</p></li><li><p>c. 过期索引不能是复合索引。因为不能指定两个过期时间。</p></li><li><p>d. 删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差。</p></li></ul><h3 id="2-6-设定索引名称"><a href="#2-6-设定索引名称" class="headerlink" title="2.6 设定索引名称"></a>2.6 设定索引名称</h3><p><strong>name：</strong> 索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</p><p><em>例：在后台创建索引，并指定索引名称为order_state</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;&quot;state&quot;:1&#125;, &#123;background: true, &quot;name&quot;:&quot;order_state&quot;&#125;)</div></pre></td></tr></table></figure><h3 id="2-7-指定以后台方式创建索引"><a href="#2-7-指定以后台方式创建索引" class="headerlink" title="2.7 指定以后台方式创建索引"></a>2.7 指定以后台方式创建索引</h3><p><strong>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。</strong></p><p><em>例：在后台创建索引</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.ensureIndex(&#123;&quot;state&quot;:1&#125;, &#123;background: true&#125;)</div></pre></td></tr></table></figure></p><h2 id="3-强制使用索引"><a href="#3-强制使用索引" class="headerlink" title="3. 强制使用索引"></a>3. 强制使用索引</h2><p><strong>在MongoDB的查询中，如果查询字段中的一个或几个字段已经创建了索引，我们可以使用hint()函数来强制使用索引。hint()在查询中是非常有效的一种优化手段。</strong></p><p><em>例：强制使用索引 {“org_order_id”: 1} 进行查询</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.find(&#123;&quot;org_order_id&quot;: &quot;123&quot;&#125;).hint(&#123;&quot;org_order_id&quot;: 1&#125;)</div></pre></td></tr></table></figure></p><h2 id="4-删除索引"><a href="#4-删除索引" class="headerlink" title="4. 删除索引:"></a>4. 删除索引:</h2><h3 id="4-1-删除单个索引"><a href="#4-1-删除单个索引" class="headerlink" title="4.1 删除单个索引:"></a>4.1 删除单个索引:</h3><p><em>例：删除名为state_1的索引</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.dropIndex(&quot;state_1&quot;)</div></pre></td></tr></table></figure></p><h3 id="4-2-删除集合所有索引"><a href="#4-2-删除集合所有索引" class="headerlink" title="4.2 删除集合所有索引:"></a>4.2 删除集合所有索引:</h3><p><em>例：删除集合order的所有索引</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ db.order.dropIndexes()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文将以集合order为例，列举常用的索引命令。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-查看索引：&quot;&gt;&lt;a href=&quot;#1-查看索引：&quot; class=&quot;headerlink&quot; title=&quot;1. 查看索引：&quot;&gt;&lt;/a&gt;1. 查看索引：&lt;/h2&gt;&lt;h
      
    
    </summary>
    
      <category term="数据库" scheme="https://blog.lonersun.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mongo" scheme="https://blog.lonersun.com/tags/Mongo/"/>
    
  </entry>
  
</feed>
